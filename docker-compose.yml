version: '3.7'
services:
  # db:
  #   image: postgres
  #   restart: always
  #   environment:
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: test
  #   volumes: 
  #         - ./postgres-data:/var/lib/postgresql/data
  #         # copy the sql script to create tables
  #         - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080
  # zookeeper:
  #   image: wurstmeister/zookeeper  
  #   restart: unless-stopped  
  #   ports: ["2181:2181"]

  # kafka:
  #   image: wurstmeister/kafka
  #   restart: unless-stopped
  #   ports: ["9092:9092"]
  #   hostname: kafka
  #   environment:
  #     - KAFKA_ADVERTISED_HOST_NAME=kafka   
  #     - KAFKA_ADVERTISED_PORT=9092
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_CREATE_TOPICS=test_topic:1:1

  # producer:
  #   build: ./services/producer
  #   restart: unless-stopped
  #   ports: ["8081:8081"]
  #   environment:  
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 
     
  # consumer:
  #   build: ./services/consumer
  #   restart: unless-stopped
  #   ports: ["8082:8082"]
  #   environment: 
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 
 
  rabbitmq3:
    container_name: "rabbitmq_test"
    image: rabbitmq:3.8-management-alpine
    environment:
        - RABBITMQ_DEFAULT_USER=myuser
        - RABBITMQ_DEFAULT_PASS=mypassword
    ports:
        # AMQP protocol port
        - '5672:5672'
        # HTTP management UI
        - '15672:15672'
  producer:
    build: ./src/publisher
    restart: unless-stopped
    ports: ["8081:8081"]
     
  consumer:
    build: ./src/consumer
    restart: unless-stopped
    ports: ["8082:8082"]